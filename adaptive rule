from flask import Flask, request, jsonify
import pandas as pd
import numpy as np

app = Flask(__name__)

# Load data
def load_data(file_path):
    try:
        data = pd.read_csv(file_path)
        return data
    except Exception as e:
        return str(e)

# Profile data
def profile_data(data):
    profile = {}
    for column in data.columns:
        profile[column] = {
            'data_type': data[column].dtype,
            'missing_values': data[column].isnull().sum(),
            'unique_values': data[column].nunique(),
            'mean': data[column].mean() if data[column].dtype in ['int64', 'float64'] else None,
            'std_dev': data[column].std() if data[column].dtype in ['int64', 'float64'] else None
        }
    return profile

# Generate adaptive data quality rules
def generate_rules(profile):
    rules = {}
    for column, properties in profile.items():
        rules[column] = []
        if properties['missing_values'] > 0:
            rules[column].append(f"Check for missing values in {column}")
        if properties['data_type'] == 'object' and properties['unique_values'] > 100:
            rules[column].append(f"Check for inconsistent data in {column}")
        if properties['data_type'] in ['int64', 'float64'] and properties['std_dev'] > 10:
            rules[column].append(f"Check for outliers in {column}")
    return rules

# API endpoint to generate data quality rules
@app.route('/generate_rules', methods=['POST'])
def generate_data_quality_rules():
    file_path = request.json['file_path']
    data = load_data(file_path)
    if isinstance(data, str):
        return jsonify({'error': data}), 400
    profile = profile_data(data)
    rules = generate_rules(profile)
    return jsonify(rules)

if __name__ == '__main__':
    app.run(debug=True)
